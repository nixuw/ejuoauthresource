---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wuxin.
--- DateTime: 2019-12-02 18:12
---


local kong = kong

local ejuoauthresource = {}
ejuoauthresource.VERSION = "1.0"
ejuoauthresource.PRIORITY=200




function ejuoauthresource:access(conf)

   -- 如果其它插件设置了这个标志，则表示无需再作任何处理
    if ngx.ctx.eju_dont_do_anything then
        return
    end

    -- 如果授权服务器验证端点也配在网关上，则不应走这个插件？
    if ngx.re.find(conf.tokenValidURL,ngx.var.uri) then
        kong.log.err("授权服务器验证端点不应配置这个网关!!!")
        return
    end


    -- 获取token
    local authorization = ngx.req.get_headers()[conf.tokenHeaderName]
    if not authorization then
       return kong.response.exit(ngx.HTTP_FORBIDDEN, { message = "Your Request is not allowed" })
    end

    -- 解析token
    local match,err = ngx.re.match(authorization,"Bearer (.*)","jio")
    if  err  or not  match  or not match[1] then
        return kong.response.exit(ngx.HTTP_FORBIDDEN, { message = "Your token is invalid" })
    end

    local token = match[1]


    -- 去验证token
    local base64 = ngx.encode_base64(conf.resourceId .. conf.resourceSecret)
    ngx.req.set_header("authorization","basic ".. base64)
    local resp = ngx.location.capture("/internal", {
        method = ngx.HTTP_GET,
        args = {url=conf.tokenValidURL .. "?token="..token},
    })


    if not resp or resp.status ~= ngx.HTTP_OK then
        return kong.response.exit(ngx.HTTP_FORBIDDEN, { message = "authorization server failed" })
    end

     -- 把结果做为请求参数，传给服务提供者
     local args = ngx.req.get_uri_args()
     args["authcontext"] = ngx.encode_base64(resp.body)
     ngx.req.set_uri_args(args)

end



return ejuoauthresource